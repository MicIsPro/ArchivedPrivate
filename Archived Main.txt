local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

wait(1)

local tpwalking = false
local speedMultiplier = 5
local noclipping = false
local infJumping = false
local f3xLoaded = false
local infJump
local noclipLoop
local lootedItems = {}
local speedConnection

local TargetNPC = nil
local DistanceBehindTarget = 0
local YOffset = 0
local npcTargetingRunning = false
local npcTargetingConnection
local selectedNPCName = nil

local tpAuraEnabled = false
local tpAuraConnection
local tpAuraIndex = 1
local tpAuraNPCs = {}

local hb = RunService.Heartbeat

local Window = Library:CreateWindow({
    Title = "Archived",
    Footer = "V1 - Devotion_M",
    Icon = 95816097006870,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("Main", "user"),
    NPCTarget = Window:AddTab("NPC Target", "crosshair"),
    LCorp = Window:AddTab("L.Corp", "building"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local function teleportToPosition(position)
    local character = LocalPlayer.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(position)})
    tween:Play()
end

local function startTpWalk()
    tpwalking = true
    local chr = LocalPlayer.Character
    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
    
    if speedConnection then
        speedConnection:Disconnect()
    end
    
    speedConnection = hb:Connect(function(delta)
        if tpwalking and chr and hum and hum.Parent then
            if hum.MoveDirection.Magnitude > 0 then
                chr:TranslateBy(hum.MoveDirection * speedMultiplier * delta * 10)
            end
        end
    end)
end

local function stopTpWalk()
    tpwalking = false
    if speedConnection then
        speedConnection:Disconnect()
        speedConnection = nil
    end
end

local function startNoclip()
    noclipping = true
    local character = LocalPlayer.Character
    if not character then return end

    if noclipLoop then
        noclipLoop:Disconnect()
    end

    noclipLoop = RunService.Stepped:Connect(function()
        if noclipping and character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide then
                    part.CanCollide = false
                end
            end
        end
    end)
end

local function stopNoclip()
    noclipping = false
    if noclipLoop then
        noclipLoop:Disconnect()
        noclipLoop = nil
    end
    
    local character = LocalPlayer.Character
    if character then
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.CanCollide = true
            end
        end
    end
end

local function startInfJump()
    infJumping = true
    
    if infJump then
        infJump:Disconnect()
    end
    
    infJump = UserInputService.JumpRequest:Connect(function()
        if infJumping then
            local character = LocalPlayer.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end
        end
    end)
end

local function stopInfJump()
    infJumping = false
    if infJump then
        infJump:Disconnect()
        infJump = nil
    end
end

local function loadF3X()
    if f3xLoaded then return end
    
    local function Load(Obj, Url)
        local function GiveOwnGlobals(Func, Script)
            local Fenv = {}
            local RealFenv = {script = Script}
            local FenvMt = {
                __index = function(a, b)
                    return RealFenv[b] == nil and getfenv()[b] or RealFenv[b]
                end,
                __newindex = function(a, b, c)
                    if RealFenv[b] == nil then 
                        getfenv()[b] = c 
                    else 
                        RealFenv[b] = c 
                    end
                end
            }
            setmetatable(Fenv, FenvMt)
            setfenv(Func, Fenv)
            return Func
        end
        
        local function LoadScripts(Script)
            if Script.ClassName == "Script" or Script.ClassName == "LocalScript" then
                task.spawn(GiveOwnGlobals(loadstring(Script.Source), Script))
            end
            for i,v in pairs(Script:GetChildren()) do
                LoadScripts(v)
            end
        end
        
        LoadScripts(Obj)
    end

    local function LoadF3X()
        local btrtool = game:GetObjects("rbxassetid://6695644299")[1]
        btrtool.Parent = LocalPlayer.Backpack
        Load(btrtool, btrtool)
        f3xLoaded = true
    end

    pcall(LoadF3X)
end

local function unloadF3X()
    f3xLoaded = false
    if LocalPlayer.Backpack:FindFirstChild("Building Tools by F3X (Plugin)") then
        LocalPlayer.Backpack["Building Tools by F3X (Plugin)"]:Destroy()
    end
    if LocalPlayer.Character:FindFirstChild("Building Tools by F3X (Plugin)") then
        LocalPlayer.Character["Building Tools by F3X (Plugin)"]:Destroy()
    end
end

local function teleportToNPC()
    if not TargetNPC or not TargetNPC.Parent then 
        npcTargetingRunning = false
        TargetNPC = nil
        Library:Notify({
            Title = "NPC Target Lost",
            Description = "Target NPC no longer exists",
            Time = 3,
        })
        return 
    end
    
    local character = LocalPlayer.Character
    if not character then return end
    
    local npcTorso = TargetNPC:FindFirstChild("Torso")
    local myHRP = character:FindFirstChild("HumanoidRootPart")
    
    if npcTorso and myHRP then
        local behindPos = npcTorso.Position - (npcTorso.CFrame.LookVector * DistanceBehindTarget)
        behindPos = behindPos + Vector3.new(0, YOffset, 0)
        myHRP.CFrame = CFrame.new(behindPos, behindPos + npcTorso.CFrame.LookVector)
    end
end

local function getNPCList()
    local npcs = {}
    local aliveFolder = workspace:FindFirstChild("Alive")
    if not aliveFolder then return npcs end
    
    for _, npc in pairs(aliveFolder:GetChildren()) do
        local torso = npc:FindFirstChild("Torso")
        local humanoid = npc:FindFirstChild("Humanoid")
        local isPlayer = Players:GetPlayerFromCharacter(npc)
        
        if torso and humanoid and not isPlayer then
            table.insert(npcs, npc.Name)
        end
    end
    
    return npcs
end

local function getAllNPCs()
    local npcs = {}
    local aliveFolder = workspace:FindFirstChild("Alive")
    if not aliveFolder then return npcs end
    
    for _, npc in pairs(aliveFolder:GetChildren()) do
        local torso = npc:FindFirstChild("Torso")
        local humanoid = npc:FindFirstChild("Humanoid")
        local isPlayer = Players:GetPlayerFromCharacter(npc)
        
        if torso and humanoid and not isPlayer then
            table.insert(npcs, npc)
        end
    end
    
    return npcs
end

local function startNPCTargeting(npcName)
    local aliveFolder = workspace:FindFirstChild("Alive")
    if not aliveFolder then
        Library:Notify({
            Title = "Error",
            Description = "Alive folder not found",
            Time = 3,
        })
        return false
    end
    
    TargetNPC = aliveFolder:FindFirstChild(npcName)
    if not TargetNPC then
        Library:Notify({
            Title = "Error",
            Description = "NPC not found in Alive folder",
            Time = 3,
        })
        return false
    end
    
    npcTargetingRunning = true
    selectedNPCName = npcName
    
    if npcTargetingConnection then
        npcTargetingConnection:Disconnect()
    end
    
    npcTargetingConnection = RunService.Heartbeat:Connect(function()
        if npcTargetingRunning then
            teleportToNPC()
        end
    end)
    
    Library:Notify({
        Title = "NPC Targeted",
        Description = "Now targeting " .. npcName,
        Time = 3,
    })
    
    return true
end

local function stopNPCTargeting()
    npcTargetingRunning = false
    TargetNPC = nil
    selectedNPCName = nil
    
    if npcTargetingConnection then
        npcTargetingConnection:Disconnect()
        npcTargetingConnection = nil
    end
    
    Library:Notify({
        Title = "NPC Untargeted",
        Description = "Stopped targeting NPC",
        Time = 3,
    })
end

local function startTpAura()
    tpAuraEnabled = true
    tpAuraNPCs = getAllNPCs()
    tpAuraIndex = 1
    
    if #tpAuraNPCs == 0 then
        Library:Notify({
            Title = "No NPCs Found",
            Description = "No NPCs available for TpAura",
            Time = 3,
        })
        tpAuraEnabled = false
        return false
    end
    
    if tpAuraConnection then
        tpAuraConnection:Disconnect()
    end
    
    tpAuraConnection = RunService.Heartbeat:Connect(function()
        if tpAuraEnabled and #tpAuraNPCs > 0 then
            local character = LocalPlayer.Character
            if not character then return end
            
            local myHRP = character:FindFirstChild("HumanoidRootPart")
            if not myHRP then return end
            
            if tpAuraIndex > #tpAuraNPCs then
                tpAuraNPCs = getAllNPCs()
                tpAuraIndex = 1
            end
            
            if tpAuraIndex <= #tpAuraNPCs then
                local npc = tpAuraNPCs[tpAuraIndex]
                if npc and npc.Parent then
                    local npcTorso = npc:FindFirstChild("Torso")
                    if npcTorso then
                        local behindPos = npcTorso.Position - (npcTorso.CFrame.LookVector * DistanceBehindTarget)
                        behindPos = behindPos + Vector3.new(0, YOffset, 0)
                        myHRP.CFrame = CFrame.new(behindPos, behindPos + npcTorso.CFrame.LookVector)
                    end
                end
                
                tpAuraIndex = tpAuraIndex + 1
                wait(0.1)
            end
        end
    end)
    
    Library:Notify({
        Title = "TpAura Started",
        Description = "Rapidly targeting all NPCs",
        Time = 3,
    })
    
    return true
end

local function stopTpAura()
    tpAuraEnabled = false
    if tpAuraConnection then
        tpAuraConnection:Disconnect()
        tpAuraConnection = nil
    end
    
    Library:Notify({
        Title = "TpAura Stopped",
        Description = "Stopped rapidly targeting NPCs",
        Time = 3,
    })
end

local MainGroupBox = Tabs.Main:AddLeftGroupbox("Movement", "zap")

MainGroupBox:AddToggle("TpWalk", {
    Text = "Speed Walk",
    Default = false,
    Callback = function(Value)
        if Value then
            startTpWalk()
        else
            stopTpWalk()
        end
    end,
})

MainGroupBox:AddSlider("SpeedSlider", {
    Text = "Speed Multiplier",
    Default = 5,
    Min = 1,
    Max = 20,
    Rounding = 0,
    Compact = false,
    Callback = function(Value)
        speedMultiplier = Value
    end,
})

MainGroupBox:AddDivider()

MainGroupBox:AddToggle("Noclip", {
    Text = "Noclip",
    Default = false,
    Callback = function(Value)
        if Value then
            startNoclip()
        else
            stopNoclip()
        end
    end,
})

MainGroupBox:AddToggle("InfJump", {
    Text = "Infinite Jump",
    Default = false,
    Callback = function(Value)
        if Value then
            startInfJump()
        else
            stopInfJump()
        end
    end,
})

local ToolsGroupBox = Tabs.Main:AddRightGroupbox("Tools", "wrench")

ToolsGroupBox:AddButton({
    Text = "Load F3X",
    Func = function()
        loadF3X()
        Library:Notify({
            Title = "F3X Loaded",
            Description = "F3X Building Tools have been loaded successfully!",
            Time = 3,
        })
    end,
    Tooltip = "Loads F3X Building Tools",
})

local TeleportGroupBox = Tabs.Main:AddLeftGroupbox("Teleports", "map-pin")

local teleportPositions = {
    {name = "Bar", pos = Vector3.new(441, -7, 438)},
    {name = "Docks", pos = Vector3.new(-1230, -11, 951)},
    {name = "Hana", pos = Vector3.new(248, 28, 587)},
    {name = "L.Corp", pos = Vector3.new(1005, 27, 1150)},
    {name = "Warp Train", pos = Vector3.new(620, -7, 408)},
}

for _, teleport in ipairs(teleportPositions) do
    TeleportGroupBox:AddButton({
        Text = teleport.name,
        Func = function()
            teleportToPosition(teleport.pos)
        end,
        Tooltip = "Teleport to " .. teleport.name,
    })
end

local ServerGroupBox = Tabs.Main:AddRightGroupbox("Server Teleports", "server")

ServerGroupBox:AddButton({
    Text = "VIP Server",
    Func = function()
        TeleportService:Teleport(99831550635699, LocalPlayer)
    end,
    Tooltip = "Teleport to VIP Server",
})

ServerGroupBox:AddButton({
    Text = "Normal Server",
    Func = function()
        TeleportService:Teleport(14038329225, LocalPlayer)
    end,
    Tooltip = "Teleport to Normal Server",
})

local NPCListGroup = Tabs.NPCTarget:AddLeftGroupbox("NPC Selection", "users")

local npcDropdown = NPCListGroup:AddDropdown("NPCList", {
    Values = {},
    Default = "",
    Multi = false,
    Text = "Select NPC",
    Tooltip = "Choose an NPC to target",
})

NPCListGroup:AddButton({
    Text = "Refresh NPC List",
    Func = function()
        local npcs = getNPCList()
        npcDropdown:SetValues(npcs)
        if #npcs == 0 then
            Library:Notify({
                Title = "No NPCs Found",
                Description = "No NPCs found in Alive folder",
                Time = 3,
            })
        else
            Library:Notify({
                Title = "NPCs Refreshed",
                Description = "Found " .. #npcs .. " NPCs",
                Time = 3,
            })
        end
    end,
    Tooltip = "Refresh the list of available NPCs",
})

local NPCControlGroup = Tabs.NPCTarget:AddRightGroupbox("NPC Control", "crosshair")

NPCControlGroup:AddToggle("TargetNPC", {
    Text = "Target Selected NPC",
    Default = false,
    Callback = function(Value)
        if Value then
            local selectedNPC = Options.NPCList.Value
            if selectedNPC and selectedNPC ~= "" then
                if startNPCTargeting(selectedNPC) then
                    
                else
                    Toggles.TargetNPC:SetValue(false)
                end
            else
                Library:Notify({
                    Title = "No NPC Selected",
                    Description = "Please select an NPC first",
                    Time = 3,
                })
                Toggles.TargetNPC:SetValue(false)
            end
        else
            stopNPCTargeting()
        end
    end,
})

NPCControlGroup:AddToggle("TpAura", {
    Text = "TpAura (Rapid Target All)",
    Default = false,
    Callback = function(Value)
        if Value then
            if startTpAura() then
                
            else
                Toggles.TpAura:SetValue(false)
            end
        else
            stopTpAura()
        end
    end,
})

NPCControlGroup:AddSlider("NPCDistance", {
    Text = "Distance Behind Target",
    Default = 0,
    Min = 0,
    Max = 20,
    Rounding = 0,
    Compact = false,
    Callback = function(Value)
        DistanceBehindTarget = Value
    end,
})

NPCControlGroup:AddSlider("NPCYOffset", {
    Text = "Y Offset",
    Default = 0,
    Min = -20,
    Max = 20,
    Rounding = 0,
    Compact = false,
    Callback = function(Value)
        YOffset = Value
    end,
})

local LCorpMainGroup = Tabs.LCorp:AddLeftGroupbox("Main Areas", "building")

local mainAreas = {
    {name = "Main", pos = Vector3.new(-6, 980, 198)},
    {name = "Storage", pos = Vector3.new(269, 980, -212)},
    {name = "Extraction Machine", pos = Vector3.new(132, 980, -31)},
    {name = "Exit", pos = Vector3.new(88, 980, -84)},
    {name = "Spawn", pos = Vector3.new(-197, 967, -232)},
}

for _, area in ipairs(mainAreas) do
    LCorpMainGroup:AddButton({
        Text = area.name,
        Func = function()
            teleportToPosition(area.pos)
        end,
        Tooltip = "Teleport to " .. area.name,
    })
end

local GatesGroup = Tabs.LCorp:AddRightGroupbox("Gates", "door-open")

local gates = {
    {name = "Orange Gate", pos = Vector3.new(-234, 980, 187)},
    {name = "Purple Gate", pos = Vector3.new(-36, 980, 28)},
    {name = "Green Gate", pos = Vector3.new(244, 980, 62)},
    {name = "Yellow Gate", pos = Vector3.new(48, 980, -308)},
    {name = "Mirror Shard", pos = Vector3.new(-338, 980, 0)},
}

for _, gate in ipairs(gates) do
    GatesGroup:AddButton({
        Text = gate.name,
        Func = function()
            teleportToPosition(gate.pos)
        end,
        Tooltip = "Teleport to " .. gate.name,
    })
end

local GeneratorsGroup = Tabs.LCorp:AddLeftGroupbox("Generators", "zap")

local generators = {
    {name = "Generator 1", pos = Vector3.new(283, 980, -180)},
    {name = "Generator 2", pos = Vector3.new(205, 980, 43)},
    {name = "Generator 3", pos = Vector3.new(60, 980, 126)},
    {name = "Generator 4", pos = Vector3.new(-165, 980, -85)},
}

for _, gen in ipairs(generators) do
    GeneratorsGroup:AddButton({
        Text = gen.name,
        Func = function()
            teleportToPosition(gen.pos)
        end,
        Tooltip = "Teleport to " .. gen.name,
    })
end

local LootGroup = Tabs.LCorp:AddRightGroupbox("Loot", "package")

local lootItems = {
    {name = "L.Corp Chest 1", pos = Vector3.new(330, 987, -229)},
    {name = "L.Corp Chest 2", pos = Vector3.new(95, 1016, 216)},
    {name = "L.Corp Chest 3", pos = Vector3.new(104, 1016, 216)},
    {name = "L.Corp Chest 4", pos = Vector3.new(28, 1005, 145)},
    {name = "Heavy Shelf 1", pos = Vector3.new(337, 987, -224)},
    {name = "Heavy Shelf 2", pos = Vector3.new(337, 987, -203)},
    {name = "Heavy Shelf 3", pos = Vector3.new(282, 980, -197)},
    {name = "Heavy Crate 1", pos = Vector3.new(301, 987, -223)},
    {name = "Heavy Crate 2", pos = Vector3.new(301, 987, -187)},
    {name = "Heavy Crate 3", pos = Vector3.new(302, 987, -202)},
    {name = "Heavy Crate 4", pos = Vector3.new(318, 987, -161)},
}

for _, loot in ipairs(lootItems) do
    LootGroup:AddButton({
        Text = loot.name,
        Func = function()
            teleportToPosition(loot.pos)
            local posKey = tostring(loot.pos)
            if not lootedItems[posKey] then
                lootedItems[posKey] = true
                Library:Notify({
                    Title = "Loot Collected",
                    Description = loot.name .. " has been marked as looted",
                    Time = 2,
                })
            end
        end,
        Tooltip = "Teleport to " .. loot.name,
    })
end

local MedicalGroup = Tabs.LCorp:AddLeftGroupbox("Medical", "heart")

local medicalItems = {
    {name = "Medical 1", pos = Vector3.new(-6, 980, -258)},
    {name = "Medical 2", pos = Vector3.new(276, 983, -282)},
    {name = "Medical 3", pos = Vector3.new(332, 999, -235)},
    {name = "Medical 4", pos = Vector3.new(273, 980, -52)},
    {name = "Medical 5", pos = Vector3.new(249, 980, 155)},
    {name = "Medical 6", pos = Vector3.new(17, 980, 267)},
    {name = "Medical 7", pos = Vector3.new(-328, 980, -156)},
    {name = "Medical 8", pos = Vector3.new(-218, 980, -10)},
    {name = "Medical 9", pos = Vector3.new(-173, 980, 67)},
    {name = "Medical 10", pos = Vector3.new(95, 980, -10)},
    {name = "Medical 11", pos = Vector3.new(-127, 968, -200)},
}

for _, med in ipairs(medicalItems) do
    MedicalGroup:AddButton({
        Text = med.name,
        Func = function()
            teleportToPosition(med.pos)
            local posKey = tostring(med.pos)
            if not lootedItems[posKey] then
                lootedItems[posKey] = true
                Library:Notify({
                    Title = "Medical Collected",
                    Description = med.name .. " has been marked as looted",
                    Time = 2,
                })
            end
        end,
        Tooltip = "Teleport to " .. med.name,
    })
end

local BarrelGroup = Tabs.LCorp:AddRightGroupbox("Barrels", "circle")

local barrels = {
    {name = "Barrel 1", pos = Vector3.new(316, 987, -202)},
    {name = "Barrel 2", pos = Vector3.new(306, 980, 32)},
    {name = "Barrel 3", pos = Vector3.new(102, 980, 261)},
    {name = "Barrel 4", pos = Vector3.new(60, 1005, 131)},
    {name = "Barrel 5", pos = Vector3.new(-132, 980, -169)},
    {name = "Barrel 6", pos = Vector3.new(-181, 980, 170)},
}

for _, barrel in ipairs(barrels) do
    BarrelGroup:AddButton({
        Text = barrel.name,
        Func = function()
            teleportToPosition(barrel.pos)
            local posKey = tostring(barrel.pos)
            if not lootedItems[posKey] then
                lootedItems[posKey] = true
                Library:Notify({
                    Title = "Barrel Collected",
                    Description = barrel.name .. " has been marked as looted",
                    Time = 2,
                })
            end
        end,
        Tooltip = "Teleport to " .. barrel.name,
    })
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.V then
        if npcTargetingRunning then
            Toggles.TargetNPC:SetValue(false)
        end
        if tpAuraEnabled then
            Toggles.TpAura:SetValue(false)
        end
    end
end)

local function setupNPCAutoRefresh()
    local aliveFolder = workspace:FindFirstChild("Alive")
    if aliveFolder then
        aliveFolder.ChildAdded:Connect(function()
            wait(0.1)
            local npcs = getNPCList()
            npcDropdown:SetValues(npcs)
        end)
        
        aliveFolder.ChildRemoved:Connect(function()
            wait(0.1)
            local npcs = getNPCList()
            npcDropdown:SetValues(npcs)
        end)
    end
    
    workspace.ChildAdded:Connect(function(child)
        if child.Name == "Alive" then
            child.ChildAdded:Connect(function()
                wait(0.1)
                local npcs = getNPCList()
                npcDropdown:SetValues(npcs)
            end)
            
            child.ChildRemoved:Connect(function()
                wait(0.1)
                local npcs = getNPCList()
                npcDropdown:SetValues(npcs)
            end)
        end
    end)
end

spawn(function()
    wait(2)
    local npcs = getNPCList()
    npcDropdown:SetValues(npcs)
    setupNPCAutoRefresh()
end)

Library:OnUnload(function()
    stopTpWalk()
    stopNoclip()
    stopInfJump()
    stopNPCTargeting()
    stopTpAura()
    unloadF3X()
end)

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")

MenuGroup:AddToggle("KeybindMenuOpen", {
    Default = Library.KeybindFrame.Visible,
    Text = "Open Keybind Menu",
    Callback = function(value)
        Library.KeybindFrame.Visible = value
    end,
})

MenuGroup:AddToggle("ShowCustomCursor", {
    Text = "Custom Cursor",
    Default = true,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end,
})

MenuGroup:AddDropdown("NotificationSide", {
    Values = { "Left", "Right" },
    Default = "Right",
    Text = "Notification Side",
    Callback = function(Value)
        Library:SetNotifySide(Value)
    end,
})

MenuGroup:AddDivider()

MenuGroup:AddLabel("Menu bind")
    :AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
    Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("ArchivedPrivate")
SaveManager:SetFolder("ArchivedPrivate/main")

SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])

SaveManager:LoadAutoloadConfig()